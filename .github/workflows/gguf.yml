name: Transfer GGUF Models
run-name: Transfer ${{ github.event.inputs.model_name }} ${{ github.event.inputs.file_filter }}

on:
  workflow_dispatch:
    inputs:
      model_name:
        description: 'HuggingFace model repo'
        required: true
        default: 'unsloth/Qwen3-Coder-30B-A3B-Instruct-GGUF'
        type: string
      file_filter:
        description: 'Filter pattern'
        required: true
        default: '*Q8_0.*'
        type: string
      split_size:
        description: 'Split size in MB'
        required: false
        default: '800'
        type: string
      merge_gguf:
        description: 'Whether merge the split gguf files'
        required: false
        default: 'false'
        type: string

jobs:
  download-gguf:
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~\AppData\Local\pip\Cache
            C:\ProgramData\chocolatey\lib
          key: ${{ runner.os }}-deps-${{ hashFiles('.github/workflows/gguf.yml') }}${{ github.event.inputs.model_name }}-${{ github.event.inputs.file_filter }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U "huggingface_hub[cli]"
          choco install 7zip -y
        env:
          ChocolateyInstall: "C:\\ProgramData\\chocolatey"

      - name: Setup llama.cpp tools
        run: |
          # Create temp directory
          New-Item -ItemType Directory -Path "C:\llama_cpp" -Force
          cd C:\llama_cpp
          
          # Get Windows cpu version binary URL
          $LATEST_URL = (Invoke-WebRequest -Uri "https://api.github.com/repos/ggerganov/llama.cpp/releases/latest" | 
            ConvertFrom-Json).assets | 
            Where-Object { $_.name -match "win-cpu-x64.zip" } | 
            Select-Object -ExpandProperty browser_download_url
          
          # Download and extract
          Invoke-WebRequest -Uri $LATEST_URL -OutFile llama.zip
          Expand-Archive -Path llama.zip -DestinationPath .
          
          # Add to PATH
          New-Item -ItemType Directory -Path "C:\bin" -Force
          Move-Item -Path "llama-gguf-split.exe" -Destination "C:\bin"
          $env:Path += ";C:\bin"
          
          # Cleanup
          cd ..
          Remove-Item -Recurse -Force C:\llama_cpp

      - name: Check disk space
        shell: pwsh
        run: |
          try {
            Get-Volume | Where-Object {$_.DriveLetter -ne $null} | ForEach-Object {
              $drive = $_
              if ($drive.Size -gt 0) {
                $freeGB = [math]::Round($drive.SizeRemaining/1GB, 2)
                $totalGB = [math]::Round($drive.Size/1GB, 2)
                $usedGB = [math]::Round(($drive.Size - $drive.SizeRemaining)/1GB, 2)
                $freePercent = [math]::Round(($drive.SizeRemaining/$drive.Size)*100, 1)
                Write-Host "Drive $($drive.DriveLetter):"
                Write-Host "  Total: ${totalGB} GB"
                Write-Host "  Used:  ${usedGB} GB"
                Write-Host "  Free:  ${freeGB} GB ($freePercent%)"
                Write-Host "-------------------"
              }
            }
          } catch {
            Write-Error "Error checking disk space: $_"
            exit 1
          }         

      - name: Download GGUF files
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          PYTHONIOENCODING: "utf-8"
        run: |
          mkdir D:\models
          hf download ${{ github.event.inputs.model_name }} --include "${{ github.event.inputs.file_filter }}" --local-dir D:\models

      - name: Get base name  
        id: get_base_name
        run: |
          $OriginalName = (Get-ChildItem D:\models -Filter "${{ github.event.inputs.file_filter }}" | Where-Object { $_.Name -notmatch '-\d+-of-\d+\.gguf$' } | Select-Object -First 1).Name
          if (-not $OriginalName) {
            $OriginalName = (Get-ChildItem D:\models -Filter "*.gguf" | Select-Object -First 1).Name
            $BASE_NAME = $OriginalName -replace '-\d+-of-\d+\.gguf$', '.gguf'
          } else {
            $BASE_NAME = $OriginalName
          }
          if ($BASE_NAME.StartsWith('wen')) {
            $BASE_NAME = 'q' + $BASE_NAME
          }
          echo "base_name=$BASE_NAME"
          echo "base_name=$BASE_NAME" >> $env:GITHUB_OUTPUT

      - name: Merge split files
        if: ${{ github.event.inputs.merge_gguf == 'true' }}
        id: merge_files
        shell: bash
        run: |
          cd D:\models
          echo "=== Directory contents before merge ==="
          ls -l
          $SPLIT_FILES = Get-ChildItem -Filter "*001-of-*.gguf.*"
          if ($SPLIT_FILES.Count -gt 0) {
            $FIRST_SPLIT = $SPLIT_FILES[0]
            # Improved pattern extraction to handle GGUF files correctly
            $BASE_PATTERN = $FIRST_SPLIT.Name -replace '-\d+-of-\d+.*\.gguf$',''
            $TARGET_NAME = "$BASE_PATTERN.gguf"
            echo "target_name=$TARGET_NAME" >> $env:GITHUB_OUTPUT
            
            Write-Host "Source file: $($FIRST_SPLIT.Name)"
            Write-Host "Base pattern: $BASE_PATTERN"
            Write-Host "Target name: $TARGET_NAME"
            
            try {
              C:\bin\llama-gguf-split --merge $FIRST_SPLIT.Name $TARGET_NAME
            } catch {
              Write-Error "Error during merge: $_"
            }
            Start-Sleep -Seconds 10
          } else {
            Write-Host "No split files found, skipping merge"
          }

      - name: clean files
        if: ${{ github.event.inputs.merge_gguf == 'true' }}
        id: clean
        run: |  
          cd D:\models          
          Get-ChildItem -Path .\
          try {
              if ($LASTEXITCODE -eq 0) {
                  Write-Host "Merge successful"
                  # Remove split files only after successful merge
                  Get-ChildItem -Filter "$BASE_PATTERN-*-of-*.gguf.*" | Remove-Item
              } else {
                  throw "Clean failed with exit code $LASTEXITCODE"
              }
          } catch {
              Write-Error "Error during delete: $_"
          }
          Get-ChildItem -Path .\
        


      - name: 7zip merged file
        if: ${{ github.event.inputs.merge_gguf == 'true' }}
        shell: bash
        run: |
          mkdir D:/volumes
          7z a -v${{ github.event.inputs.split_size }}m "D:\volumes\${{ steps.get_base_name.outputs.BASE_NAME }}.7z" "D:\models\${{ steps.merge_files.outputs.TARGET_NAME }}"
      
      - name: 7zip folder
        if: ${{ github.event.inputs.merge_gguf == 'false' }}
        shell: bash
        run: |        
          ls -l D:/models
          mkdir D:/volumes
          7z a -v${{ github.event.inputs.split_size }}m "D:\volumes\${{ steps.get_base_name.outputs.BASE_NAME }}.7z" "D:\models\*${{ github.event.inputs.file_filter }}*gguf"
      
      - name: check zipped
        shell: bash
        run: ls -l D:/volumes


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_base_name.outputs.base_name }}-${{ github.sha }}
          release_name: ${{ steps.get_base_name.outputs.base_name }}
          draft: false
          prerelease: false   
  
      - name: Upload release
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |          
            const path = require('path');
            const fs = require('fs');
            
            // Retrieve necessary information
            const release_id = `${{ steps.create_release.outputs.id }}`;
            const release_url = `${{ steps.create_release.outputs.html_url }}`;
  
            let releaseDescription = '';
  
            // Append the file URL to the release description           
            releaseDescription += `This archive was created using following settings: `;
            releaseDescription += `\nmodel_name: ${{ github.event.inputs.model_name }}`;
            releaseDescription += `\nfile_filter: ${{ github.event.inputs.file_filter }}`;
            releaseDescription += `\nsplit_size: ${{ github.event.inputs.split_size }}`;
            releaseDescription += `\nmerge_gguf: ${{ github.event.inputs.merge_gguf }}`;
  
            // Update the release with the description
            await github.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id,
                body: releaseDescription,
            });
          
      - name: Upload release batch 1
        id: upload_release_batch1
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            
            const files = await fs.readdirSync('D:/volumes');
            const batch1 = files.slice(0, 38);
            
            for (let file of batch1) {
                console.log('uploadReleaseAsset batch1:', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: '${{ steps.create_release.outputs.id }}',
                  name: file,
                  data: await fs.readFileSync(path.join('D:/volumes', file))
                });
            }
    
      - name: Upload release batch 2
        id: upload_release_batch2
        if: ${{ success() }}
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            
            const files = await fs.readdirSync('D:/volumes');
            const batch2 = files.slice(38, 76);
            
            if (batch2.length === 0) {
              console.log('No files for batch 2');
              return;
            }
            
            for (let file of batch2) {
                console.log('uploadReleaseAsset batch2:', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: '${{ steps.create_release.outputs.id }}',
                  name: file,
                  data: await fs.readFileSync(path.join('D:/volumes', file))
                });
            }
      
      - name: Upload release batch 3
        id: upload_release_batch3
        if: ${{ success() }}
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            
            const files = await fs.readdirSync('D:/volumes');
            const batch3 = files.slice(76);
            
            if (batch3.length === 0) {
              console.log('No files for batch 3');
              return;
            }
            
            for (let file of batch3) {
                console.log('uploadReleaseAsset batch3:', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: '${{ steps.create_release.outputs.id }}',
                  name: file,
                  data: await fs.readFileSync(path.join('D:/volumes', file))
                });
            }